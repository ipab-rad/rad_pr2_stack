#!/usr/bin/env python
PACKAGE = "plane_segmentation"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
gen.add("publish_planes",   bool_t,   0, "Process and publish a plane",  True)
gen.add("publish_outliers",   bool_t,   0, "Process and publish outliers",  False)
gen.add("segment_objects",   bool_t,   0, "Extract objects above table",  True)
gen.add("leaf_size_m", double_t, 0, "Size of leaf subsampling (m)",    0.0001, 0.000,   0.05)
gen.add("prefiltering", int_t, 0, "Number of neighbours to quiry with std 1.0 (-1 means off)", -1, -1, 100)
gen.add("plane_threshold_m", double_t, 0, "What fluctuation is acceptable for fitting a plane (m)",    0.01, 0.0,   1)
extraction_method_enum = gen.enum([ gen.const("Naive",      int_t, 0, "Extract above height"),
                                    gen.const("Advanced",   int_t, 1, "Extract parallel to plane fitting")],
                       "Possible Object Extraction Methods")
gen.add("extraction_method", int_t, 0, "Possible Object Extraction Methods Selction", 1, 0, 1, edit_method=extraction_method_enum)
gen.add("colour_filtering",   bool_t,   0, "[Extraction] Apply colour filtering",  True)
gen.add("colour_gray_min", int_t, 0, "Minimum gray value (GE)", 35, 0, 255)
gen.add("colour_gray_max", int_t, 0, "Maximum gray value (LE)", 255, 0, 255)
gen.add("neighboring_filter_radius", double_t, 0, "[Extraction] The radius for the neighbouring filter",    0.005, 0.001,   0.20)
gen.add("neighboring_filter_n_count", int_t, 0, "[Extraction] How many neighburghs are required for stay alive",    5, 1,   100)
gen.add("threshold_scale", double_t, 0, "[Advanced Extraction] Scaling of the plane_threshold_m for advanced obj extraction",    0.01, 0.0,   5)
gen.add("simple_threshold_z_plane_height_min", double_t, 0, "[Simple Extraction] Minimim table height (m)",    0.7, 0.0,  1.5)
gen.add("simple_threshold_z_plane_height_max", double_t, 0, "[Simple Extraction] Maximum extracted height (m)",    1.5, 0.0,  3.0)
gen.add("postfiltering_segmented", int_t, 0, "Number of neighbours to quiry with std 1.0 (-1 means off)", 3, -1, 100)
gen.add("euclidean_clustering",   bool_t,   0, "Should euclidean clustering be performed on the segmented pointcloud",  True)
gen.add("max_cluster_dist", double_t, 0, "[Eucl Cl] Maximum distance from center loc (m)",    0.5, 0.0,  5.0)
gen.add("mesh_save",   bool_t,   0, "Save /tmp/obj.ply file of the cluster",  False)
gen.add("mesh_view",   bool_t,   0, "Visualize a mesh with the method below",  False)
meshing_methods_enum = gen.enum([ gen.const("Triangulation",      int_t, 0, "Triangulation"),
                                  gen.const("Poisson",            int_t, 1, "Works best with closed shapes")],
                                  "Possible Meshing Methods")
gen.add("meshing_method", int_t, 0, "Possible Meshing methods", 0, 0, 1, edit_method=meshing_methods_enum)

# gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
# gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
# gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
# gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

# size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                        gen.const("Medium",     int_t, 1, "A medium constant"),
#                        gen.const("Large",      int_t, 2, "A large constant"),
#                        gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                      "An enum to set size")

# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "plane_segmentation", "PlaneSegmentationParams"))
